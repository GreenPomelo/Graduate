<template lang="pug">
view.container
  view.questionnaire-header
    view.header-title {{ title }}
    view.header-detail
      view 来源：{{ source }}
      view 时间：{{ deadline }}{{ relativeDate }}
    view.header-circle
      view.header-circle-1
      view.header-circle-2
      view.header-circle-3
      view.header-circle-4
  view.questionnaire-line
  view.questionnaire-content
    repeat(for='{{ questions }}', index='qIndex', key='qItem', item='qItem')
      view.question-title
        | {{ qItem.id }}. {{ qItem.content }}
        span {{ qItem.required?"*":"" }}
      view.question-card(class="{{qItem.type=='single'?'radio-box-container':''}}")
        repeat(for='{{ qItem.answer }}', index='aIndex', key='aItem', item='aItem')
          view.answerItem.radioItem.shadow-box( @tap='checkbox', data-qindex='{{ qIndex }}', data-aindex='{{ aIndex }}', data-type='radio')
            view.answer-radiobox(class="{{ aItem.checked?'answer-radiobox-ontap':'' }}")
              view.radiobox-circle(class="{{ aItem.checked?'radiobox-circle-ontap':'' }}")
            span.answer-content(class="{{ aItem.checked?'answer-content-ontap':'' }}") {{aItem.value}}
      view.question-card.shadow-box(class="{{qItem.type=='multiple'?'check-box-container':''}}")
        repeat(for='{{ qItem.answer }}', index='aIndex', key='aItem', item='aItem')
          view.answerItem.checkItem( @tap='checkbox', data-qindex='{{ qIndex }}', data-aindex='{{ aIndex }}', data-type='check')
            view.answer-checkbox(class="{{ aItem.checked?'answer-checkbox-ontap':'' }}")
              image.checkbox-tick(class="{{ aItem.checked?'checkbox-tick-ontap':'' }}", mode='aspectFit', src='http://p37nq1juh.bkt.clouddn.com/tick.svg')
            span.answer-content(class="{{ aItem.checked?'answer-content-ontap':'' }}") {{aItem.value}}
      view.question-card(class="{{qItem.type=='textA'?'input-container':''}}")
        input.answerItem.inputItem.boxshadow(class="{{ inputOnTap?'boxshadow-onfocus':'' }}", placeholder-class='placeholderClass', placeholder='{{qItem.answer}}', @focus='showboxshadow', @blur='hideboxshadow', @input='textInput', data-qindex='{{ qIndex }}', data-type='input')
      view.question-card(class="{{qItem.type=='textB'?'textarea-container':''}}")
        textarea.answerItem.textareaItem.boxshadow(class="{{ textareaOnTap?'boxshadow-onfocus':'' }}", placeholder-class='placeholderClass', placeholder='{{qItem.answer}}', @focus='showboxshadow', @blur='hideboxshadow', @input='textInput', data-qindex='{{ qIndex }}', data-type='textarea')
    button.save-submit-btn( @tap='submitQuestionnaire') 保存并提交
</template>

<script>
import wepy from "wepy";
import { request } from "../utils/utils.js";
export default class extends wepy.page {
  config = {
    navigationBarTitleText: "",
    navigationBarBackgroundColor: "#00ca8f",
    navigationBarTextStyle: "white"
  };
  data = {
    inputOnTap: false,
    textareaOnTap: false,
    title: "",
    questionnaireId: "",
    source: "",
    deadline: "",
    relativeDate: "",
    questions: [],
    completed: true
  };
  methods = {
    showboxshadow(e) {
      let type = e.currentTarget.dataset.type;
      if (type === "textarea") {
        this.textareaOnTap = true;
      } else if (type === "input") {
        this.inputOnTap = true;
      }
      this.$apply();
    },
    hideboxshadow(e) {
      let type = e.currentTarget.dataset.type;
      if (type === "textarea") {
        this.textareaOnTap = false;
      } else if (type === "input") {
        this.inputOnTap = false;
      }
      this.$apply();
    },
    checkbox(e) {
      let qIndex = Number(e.currentTarget.dataset.qindex);
      let aIndex = Number(e.currentTarget.dataset.aindex);
      let type = e.currentTarget.dataset.type;
      let answer = this.questions[qIndex].answer;
      if (type === "radio") {
        for (let i in answer) {
          if (Number(i) === aIndex) {
            this.questions[qIndex].answer[i].checked = !answer[i].checked;
          } else {
            this.questions[qIndex].answer[i].checked = false;
          }
        }
      } else if (type === "check") {
        this.questions[qIndex].answer[aIndex].checked = !answer[aIndex].checked;
      }
      this.$apply();
    },
    textInput(e) {
      let qIndex = Number(e.currentTarget.dataset.qindex);
      this.questions[qIndex].answer = e.detail.value;
    }
  };
  async getQuestionnaire() {
    let that = this;
    let questionnaire = await request({
      url:
        "https://qingyou.njupt.edu.cn/mini_program/wenjuan/questionnaires/detail?id=" +
        that.questionnaireId,
      method: "GET",
      header: {
        Cookie: "token=" + wepy.getStorageSync("questionnaire_token")
      }
    });
    if (questionnaire.data.success) {
      that.questions = questionnaire.data.data.questions;
      that.title = questionnaire.data.data.name;
      let timestamp = questionnaire.data.data.deadline;
      if (timestamp !== 1356019200000 && timestamp !== 3489458895000) {
        that.deadline =
          new Date(questionnaire.data.data.deadline)
            .toLocaleDateString()
            .replace(/\//g, ".") + " ";
      } else {
        that.deadline = "";
      }
    } else {
      await wepy.showToast({
        title: "获取问卷信息失败,请重试",
        icon: "none",
        duration: 1500
      });
    }
  }
  async submitQuestionnaire() {
    let answerArray = [];
    let that = this;
    this.completed = true;
    this.questions.map(item => {
      let answer = this.getQuestionAnswer(item);
      if (answer) {
        answerArray.push({
          answer: answer,
          id: item.id,
          type: item.type
        });
      } else {
        this.completed = false;
      }
    });
    this.$apply();
    if (this.completed) {
      let postQuestionnaire = await request({
        url:
          "https://qingyou.njupt.edu.cn/mini_program/wenjuan/fillQuestionnaire",
        method: "POST",
        data: {
          questionId: that.questionnaireId,
          answers: answerArray
        },
        header: {
          Cookie: "token=" + wepy.getStorageSync("questionnaire_token")
        }
      });
      await wepy.showLoading({
        title: "提交中"
      });
      setTimeout(() => {
        wepy.hideLoading();
        if (postQuestionnaire.data.success) {
          wepy.showToast({
            title: "提交成功",
            icon: "none",
            duration: 1500
          });
          const page = this.getCurrentPages();
          page[page.length - 2].data.questionnaires.map(item => {
            if (this.questionnaireId === item.questionId) {
              item.status = 1;
            }
          });
          wepy.navigateBack({
            delta: 1
          });
        } else if (postQuestionnaire.data.errCode === 425) {
          wepy.showToast({
            title: "已经提交过一次了哦",
            icon: "none",
            duration: 1500
          });
        } else {
          wepy.showToast({
            title: "提交失败,请重试",
            icon: "none",
            duration: 1500
          });
        }
      }, 1000);
    } else {
      wepy.showToast({
        title: "问卷尚未填写完整",
        icon: "none",
        duration: 1500
      });
    }
  }
  getQuestionAnswer(item) {
    let indexArray = [];
    if (item.type === "single" || item.type === "multiple") {
      for (let i in item.answer) {
        if (item.answer[i].checked) {
          indexArray.push(i);
        }
      }
      if ((item.required && indexArray.length !== 0) || !item.required) {
        return indexArray;
      } else {
        return false;
      }
    } else {
      if ((item.required && !/^\s*$/.test(item.answer)) || !item.required) {
        return item.answer;
      } else {
        return false;
      }
    }
  }
  async init() {
    await this.getQuestionnaire();
    this.questions.map(item => {
      let answer = item.answer;
      if (item.type === "single" || item.type === "multiple") {
        for (let i in answer) {
          item.answer[i] = {
            value: answer[i],
            checked: false
          };
        }
      } else {
        item.answer = answer[0];
      }
    });
    this.$apply();
  }
  async onLoad(options) {
    this.questionnaireId = options.questionnaireId;
    this.relativeDate = options.deadline;
    this.source = options.assignName;
    this.$apply();
    this.init();
  }
}
</script>

<style lang="stylus" scoped>
.container
  display flex
  flex-direction column
  font-family PingFangSC-Regular
  font-size 28rpx
  .questionnaire-header
    padding 60rpx 60rpx 40rpx 60rpx
    position relative
    overflow hidden
    .header-title
      font-size 40rpx
      font-family PingFangSC-Semibold
      color #195498
      margin-bottom 16rpx
    .header-detail
      font-size 24rpx
      color #9a9a9a
    .header-circle
      .header-circle-1
        height 16rpx
        width 16rpx
        border-radius 50%
        border solid 8rpx rgba(230, 241, 255, 1)
        position absolute
        right 310rpx
        bottom 130rpx
        z-index -2
      .header-circle-2
        height 30rpx
        width 30rpx
        border-radius 50%
        border solid 12rpx rgba(230, 242, 255, 1)
        position absolute
        right 260rpx
        bottom 80rpx
        z-index -2
      .header-circle-3
        width 90rpx
        height 90rpx
        border-radius 50%
        border solid 24rpx rgba(230, 242, 255, 1)
        position absolute
        right 120rpx
        bottom -20rpx
        z-index -2
      .header-circle-4
        width 150rpx
        height 150rpx
        border-radius 50%
        border solid 36rpx rgba(221, 237, 255, 1)
        position absolute
        bottom -14rpx
        right -14rpx
        z-index -1
  .questionnaire-line
    background #f5f5f5
    height 14rpx
    width 100%
  .questionnaire-content
    padding 40rpx 50rpx
    .question-title
      font-size 32rpx
      color #353535
      margin 0 10rpx
      span
        color #d0021b
    .question-card
      display none
      .placeholderClass
        color #9a9a9a
    .radio-box-container, .check-box-container, .input-container, .textarea-container
      display block
      overflow hidden
    .radio-box-container, .input-container, .textarea-container
      padding 20rpx 10rpx 40rpx 10rpx
    .check-box-container
      margin 20rpx 10rpx 40rpx 10rpx
    .answerItem
      height 80rpx
      display flex
      align-items center
      padding 0 26rpx
      width auto
      .answer-radiobox, .answer-checkbox
        margin-right 20rpx
        height 34rpx
        width 34rpx
        border solid 2rpx #9a9a9a
        display flex
        align-items center
        justify-content center
      .answer-radiobox
        border-radius 50%
        .radiobox-circle
          height 18rpx
          width 18rpx
          background #4a90e2
          display none
          border-radius 50%
        .radiobox-circle-ontap
          display block
      .answer-checkbox
        border-radius 4rpx
        .checkbox-tick
          display none
          height 30rpx
          width 30rpx
        .checkbox-tick-ontap
          display block
      .answer-radiobox-ontap, .answer-checkbox-ontap
        border solid 2rpx #4a90e2
      .answer-content
        color #9a9a9a
      .answer-content-ontap
        color #4a90e2
    .radioItem
      margin-bottom 20rpx
    .radioItem:last-child
      margin-bottom 0
    .checkItem
      border-bottom solid 2rpx rgba(219, 219, 219, 0.5)
    .checkItem:last-child
      border none
    .textareaItem
      height 160rpx
      padding 20rpx 26rpx
    .save-submit-btn
      border solid 2rpx rgba(219, 219, 219, 0.5)
      border-radius 14rpx
      background #4a90e2
      font-size 32rpx
      margin 20rpx 10rpx
      color #fff
.shadow-box
  background-color rgba(255, 255, 255, 0.34)
  box-shadow 0rpx 0rpx 10rpx 0rpx rgba(219, 219, 219, 0.5)
  border-radius 14rpx
  border solid 2rpx rgba(219, 219, 219, 0.5)
.shadow-box:hover
  box-shadow 0rpx 0rpx 10rpx 0rpx #4a90e2
  border solid 2rpx #4a90e2
.boxshadow
  background-color rgba(255, 255, 255, 0.34)
  box-shadow 0rpx 0rpx 10rpx 0rpx rgba(219, 219, 219, 0.5)
  border-radius 14rpx
  border solid 2rpx rgba(219, 219, 219, 0.5)
.boxshadow-onfocus
  box-shadow 0rpx 0rpx 10rpx 0rpx #4a90e2
  border solid 2rpx #4a90e2
</style>
